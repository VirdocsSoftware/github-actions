on:
  workflow_call:
    outputs:
      DEVOPS_ENV_NAME_DEV:
        description: "The name of the 'dev' deployment environment"
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_ENV_NAME_DEV }}
      DEVOPS_ENV_NAME_UAT:
        description: "The name of the 'uat' deployment environment"
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_ENV_NAME_UAT }}
      DEVOPS_ENV_NAME_DEMO:
        description: "The name of the 'demo' deployment environment"
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_ENV_NAME_DEMO }}
      DEVOPS_ENV_NAME_PROD:
        description: "The name of the 'prod' deployment environment"
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_ENV_NAME_PROD }}
      DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME:
        description: "The name of the current deployment environment. That is one of: dev, uat, demo, or prod. This is used to determine what AWS account to deploy into."
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME }}
      DEVOPS_IS_FEATURE_BRANCH:
        description: "A true/false flag that indicates whether the current GitHub branch is a feature branch or not. It is determined to be a feature branch if the branch name is not one of: 'develop', 'uat', 'demo', 'main'."
        value: ${{ jobs.devops-env-vars.outputs.DEVOPS_IS_FEATURE_BRANCH }}
      DEVOPS_BRANCH_ENV_NAME:
        description: "A value to append to CloudFormation stack names and AWS resource names for the purpose of "
        value: ${{ jobs.devops-branch-vars.outputs.DEVOPS_BRANCH_ENV_NAME }}


jobs:
  devops-env-vars:
    runs-on: ubuntu-latest
    outputs:
      DEVOPS_ENV_NAME_DEV: ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEV }}
      DEVOPS_ENV_NAME_UAT: ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_UAT }}
      DEVOPS_ENV_NAME_DEMO: ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEMO }}
      DEVOPS_ENV_NAME_PROD: ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_PROD }}
      DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME: ${{ steps.determine-deployment-env.outputs.DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME }}
      DEVOPS_IS_FEATURE_BRANCH: ${{ steps.determine-deployment-env.outputs.DEVOPS_IS_FEATURE_BRANCH }}
    steps:
      - name: Echo Version
        run: |
          echo 'devops-vars v1.3.0'

      - name: Define DEVOPS_CURRENT_DEPLOYMENT_ENV_NAMEs
        id: define-deployment-envs
        shell: bash
        run: |
          #!/bin/bash
          echo "Setting the four available Deployment Environments to be:"

          env_dev=dev
          echo "DEVOPS_ENV_NAME_DEV=$env_dev"
          echo "DEVOPS_ENV_NAME_DEV=$env_dev" >> $GITHUB_OUTPUT;

          env_uat=uat
          echo "DEVOPS_ENV_NAME_UAT=$env_uat"
          echo "DEVOPS_ENV_NAME_UAT=$env_uat" >> $GITHUB_OUTPUT;

          env_demo=demo
          echo "DEVOPS_ENV_NAME_DEMO=$env_demo"
          echo "DEVOPS_ENV_NAME_DEMO=$env_demo" >> $GITHUB_OUTPUT;

          env_prod=prod
          echo "DEVOPS_ENV_NAME_PROD=$env_prod"
          echo "DEVOPS_ENV_NAME_PROD=$env_prod" >> $GITHUB_OUTPUT;

      - name: Determine value of variable DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME
        id: determine-deployment-env
        env:
          GITHUB_BRANCH_NAME: ${{ github.ref_name }}
        shell: bash
        run: |
          #!/bin/bash
          refname=$GITHUB_BRANCH_NAME
          echo "Branch Ref is ${GITHUB_BRANCH_NAME}"

          # These are the special branch names that indicate the environment we are deploying to.
          reDev="develop"
          reUat="uat"
          reDemo="demo"
          reProd="main"

          # Setting Feature Branch Flag to be false
          echo "Setting DEVOPS_IS_FEATURE_BRANCH to 'false' by default";
          echo "DEVOPS_IS_FEATURE_BRANCH=false" >> $GITHUB_OUTPUT;

          # Logic for Checking Deployment Env
          echo "Checking if branch name indicates a deployment to one of the four environments (dev, uat, demo, or prod)"
          if [[ $refname =~ $reProd ]]; then
            echo "Setting DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME to ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_PROD }}";
            echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_PROD }}" >> $GITHUB_OUTPUT;
          elif [[ $refname =~ $reUat ]]; then
            echo "Setting DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME to be ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_UAT }}";
            echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_UAT }}" >> $GITHUB_OUTPUT;
          elif [[ $refname =~ $reDemo ]]; then
            echo "Setting DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME to be ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEMO }}";
            echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEMO }}" >> $GITHUB_OUTPUT;
          elif [[ $refname =~ $reDev ]]; then
            echo "Setting DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME to be ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEV }}";
            echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEV }}" >> $GITHUB_OUTPUT;
          else
            # In case none of the above occurs
            echo "Setting DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME to be ${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEV }}";
            echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.define-deployment-envs.outputs.DEVOPS_ENV_NAME_DEV }}" >> $GITHUB_OUTPUT;
            echo "Setting DEVOPS_IS_FEATURE_BRANCH to 'true' becuase this is not one of the four known environment branches.";
            echo "DEVOPS_IS_FEATURE_BRANCH=true" >> $GITHUB_OUTPUT;
          fi;

      - name: Echo DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME
        run: echo "DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME=${{ steps.determine-deployment-env.outputs.DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME }}"

      - name: Echo DEVOPS_IS_FEATURE_BRANCH
        run: echo "DEVOPS_IS_FEATURE_BRANCH=${{ steps.determine-deployment-env.outputs.DEVOPS_IS_FEATURE_BRANCH }}"


  devops-jira-vars:
    runs-on: ubuntu-latest
    needs: [devops-env-vars]
    outputs:
      DEVOPS_JIRA_TICKET_ID: ${{ steps.extract-jira-ticket-id.outputs.DEVOPS_JIRA_TICKET_ID }}
    steps:
      - name: Echo Version
        run: |
          echo 'devops-vars v1.3.0'

      - name: Extract JIRA Prefix to Variable DEVOPS_JIRA_TICKET_ID
        id: extract-jira-ticket-id
        env:
          GITHUB_BRANCH_NAME: ${{ github.ref_name }}
        shell: bash
        run: |
          #!/bin/bash
          # Set to "N/A" if not a feature branch
          if [ ${{ needs.devops-env-vars.outputs.DEVOPS_IS_FEATURE_BRANCH }} = 'false' ]; then
            echo "DEVOPS_JIRA_TICKET_ID=N/A" >> $GITHUB_OUTPUT;
          else
            refname=$GITHUB_BRANCH_NAME
            re="[A-Z]+-[0-9]+"

            echo "Checking if branch name contains a JIRA issue (format MID-1234, AN-1 or similar)"
            if [[ $refname =~ $re ]]; then
              echo "JIRA Ticket ID found within ${refname}";
              echo "DEVOPS_JIRA_TICKET_ID=$(echo ${BASH_REMATCH[0]})" >> $GITHUB_OUTPUT;
            else
              echo "Malformed Branch Name: ${refname} does not contain a JIRA Ticket ID and is not a known env specific branch.";
              exit 1;
            fi
          fi;

      - name: Echo DEVOPS_JIRA_TICKET_ID
        run: echo "DEVOPS_JIRA_TICKET_ID=${{ steps.extract-jira-ticket-id.outputs.DEVOPS_JIRA_TICKET_ID }}"


  devops-branch-vars:
    runs-on: ubuntu-latest
    needs: [devops-env-vars, devops-jira-vars]
    outputs:
      DEVOPS_BRANCH_ENV_NAME: ${{ steps.determine-branch-env-name.outputs.DEVOPS_BRANCH_ENV_NAME }}
    steps:
      - name: Echo Version
        run: |
          echo 'devops-vars v1.3.0'

      - name: Determine Branch Env Name based upon DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME and DEVOPS_IS_FEATURE_BRANCH
        id: determine-branch-env-name
        shell: bash
        run: |
          #!/bin/bash
          if [ ${{ needs.devops-env-vars.outputs.DEVOPS_IS_FEATURE_BRANCH }} = true ]; then
            echo "Setting DEVOPS_ENV_NAME to be equal to DEVOPS_JIRA_TICKET_ID";
            echo "DEVOPS_BRANCH_ENV_NAME=${{ needs.devops-jira-vars.outputs.DEVOPS_JIRA_TICKET_ID }}" >> $GITHUB_OUTPUT;
          else
            echo "Setting DEVOPS_ENV_NAME to be equal to DEVOPS_JIRA_TICKET_ID";
            echo "DEVOPS_BRANCH_ENV_NAME=${{ needs.devops-env-vars.outputs.DEVOPS_CURRENT_DEPLOYMENT_ENV_NAME }}" >> $GITHUB_OUTPUT;
          fi;

      - name: Echo DEVOPS_BRANCH_ENV_NAME
        run: echo "DEVOPS_BRANCH_ENV_NAME=${{ steps.determine-branch-env-name.outputs.DEVOPS_BRANCH_ENV_NAME }}"
